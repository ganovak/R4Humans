<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R 4 Humans</title>
    <link>/</link>
    <description>Recent content on R 4 Humans</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Multi-Line Text in ggplot2 Graphics</title>
      <link>/2019/08/14/multi-line-text-in-ggplot2-graphics/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/14/multi-line-text-in-ggplot2-graphics/</guid>
      <description>In terms of labeling, ggplot2 provides a lot of options. However, the default is to put this text in a single line, regardless of length. This can do real strange things to spacing within the figure. Shortening labels is not always an option, so here we will explore the available labels for ggplot figures and how to force multi-lines.
Available labels# simulating dataset.seed(08142019)data&amp;lt;-data.frame(x=sample(1:100,100),y=sample(1:100,100),cat1=sample(c(&amp;quot;group 1&amp;quot;,&amp;quot;group 2&amp;quot;),100,replace=T),cat2=sample(c(&amp;quot;type 1&amp;quot;,&amp;quot;type 2&amp;quot;),100,replace=T))# plot without label specifcationlibrary(ggplot2)plot1&amp;lt;-ggplot(data,aes(x,y,shape=cat1,color=cat2))+geom_point()plot1If labels are not explicitly entered, ggplot defaults to using variable names for axes and legends.</description>
    </item>
    
    <item>
      <title>Mapping with ggplot2</title>
      <link>/project/test/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/project/test/</guid>
      <description>Reading in Spatial ObjectsFrom tigiris filesThere are many packages that make sourcing shp files easier. We will focus on the tigris package which downloads a variety of files directly from the US Census Bureau. The package contains functions for downloading many different geographies, in this case we will use a state map.
library(tigris)tig&amp;lt;-states(year = 2017)head(tig@data)## REGION DIVISION STATEFP STATENS GEOID STUSPS NAME LSAD MTFCC## 0 3 5 54 01779805 54 WV West Virginia 00 G4000## 1 3 5 12 00294478 12 FL Florida 00 G4000## 2 2 3 17 01779784 17 IL Illinois 00 G4000## 3 2 4 27 00662849 27 MN Minnesota 00 G4000## 4 3 5 24 01714934 24 MD Maryland 00 G4000## 5 1 1 44 01219835 44 RI Rhode Island 00 G4000## FUNCSTAT ALAND AWATER INTPTLAT INTPTLON## 0 A 62265662566 489840834 +38.</description>
    </item>
    
    <item>
      <title>Using LaTeX Font in Graphics</title>
      <link>/2019/08/09/using-latex-font-in-graphics/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/08/09/using-latex-font-in-graphics/</guid>
      <description>When creating graphics to insert into reports, either directly through RMarkdown or with an exported image file, it can be annoying when the font used in the text and the graphic donâ€™t match. LaTex uses Computer Modern as its default font, this is a serif font but slightly different from the Times New Roman used by ggplot::theme(text=element_text(family=&#34;serif&#34;)). If no font family is provided, ggplot uses Ariel as a default. R base graphics similarly use a san-serif font.</description>
    </item>
    
  </channel>
</rss>